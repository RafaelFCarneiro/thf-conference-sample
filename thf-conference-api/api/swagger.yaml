---
swagger: "2.0"
info:
  description: "THF conference application API.\n"
  version: "1.0.0"
  title: "THF Conference App"
  termsOfService: ""
  contact:
    url: "https://thf.totvs.com.br/"
host: "thfservices.totvs.com.br"
basePath: "/conference-api/api/v1"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /conferences/:
    get:
      tags:
      - "Conferences"
      summary: "Load the list of conferences"
      operationId: "conferencesGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/conferencesResponse"
          examples:
            application/json: "{\n\t\"hasNext\": false,\n\t\"items\": [{\n\t\t\"id\"\
              : 1,\n\t\t\"title\": \"THF conference 2017\",\n\t\t\"date\": \"2017-07-11T00:00:00Z\"\
              ,\n\t\t\"location\": \"Av. Santos Dumont, 831 - Santo AntÃ´nio, Joinville\
              \ - SC\",\n\t\t\"description\": \"Conference organized by THF\"\n\t\
              }, {\n\t\t\"id\": 2,\n\t\t\"title\": \"THF conference 2018\",\n\t\t\"\
              date\": \"2018-08-11T00:00:00Z\",\n\t\t\"location\": \"Av. Santos Dumont,\
              \ 831 - Santo AntÃ´nio, Joinville - SC\",\n\t\t\"description\": \"Conference\
              \ organized by THF\"\n\t}]\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n\t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Conferences"
  /conferences/{id}:
    get:
      tags:
      - "Conferences"
      summary: "Load an individual conference"
      operationId: "conferencesIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Conference id."
        required: true
        type: "string"
        x-example: "1"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/conference"
          examples:
            application/json: "{\n\t\"id\": 2,\n\t\"title\": \"THF conference 2018\"\
              ,\n\t\"date\": \"2018-08-11T00:00:00Z\",\n\t\"location\": \"Av. Santos\
              \ Dumont, 831 - Santo AntÃ´nio, Joinville - SC\",\n\t\"description\"\
              : \"Conference organized by THF\"\n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"404\",\n\t\"message\": \"Not Found\"\
              ,\n\t\"detailedMessage\": \"Conference not found\"\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n\t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Conferences"
    put:
      tags:
      - "Conferences"
      summary: "Update a conference"
      operationId: "conferencesIdPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Conference id."
        required: true
        type: "string"
        x-example: "1"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/conference"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/conference"
          examples:
            application/json: "{\n\t\"id\": 2,\n\t\"title\": \"THF conference 2018\"\
              ,\n\t\"date\": \"2018-08-11T00:00:00Z\",\n\t\"location\": \"Av. Santos\
              \ Dumont, 831 - Santo AntÃ´nio, Joinville - SC\",\n\t\"description\"\
              : \"Conference organized by THF\"\n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n\t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Conferences"
  /conferences/diff/{date}:
    get:
      tags:
      - "Conferences"
      summary: "Load"
      operationId: "conferencesDiffDateGET"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "Date."
        required: true
        type: "string"
        format: "date-time"
        x-example: "2018-06-14T13:15:35.605Z"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/conferencesResponse"
      x-swagger-router-controller: "Conferences"
  /lectures/:
    get:
      tags:
      - "Lectures"
      summary: "Load the list of lectures"
      operationId: "lecturesGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/lecturesResponse"
          examples:
            application/json: "{\n\t\"hasNext\": false,\n\t\"items\": [{\n\t\t\"id\"\
              : \"1\",\n\t\t\"title\": \"Unit testing for beginners\",\n\t\t\"room\"\
              : \"2B\",\n\t\t\"startTime\": \"08:30:00\",\n\t\t\"endTime\": \"08:45:00\"\
              ,\n\t\t\"description\": \"Unit testing for beginners\",\n\t\t\"trackId\"\
              : \"4\",\n\t\t\"speakerId\": \"4\"\n\t}, {\n\t\t\"id\": \"2\",\n\t\t\
              \"title\": \"Chrome devtools\",\n\t\t\"room\": \"2C\",\n\t\t\"startTime\"\
              : \"08:45:00\",\n\t\t\"endTime\": \"09:00:00\",\n\t\t\"description\"\
              : \"Chrome devtools\",\n\t\t\"trackId\": \"6\",\n\t\t\"speakerId\":\
              \ \"3\"\n\t}]\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n\t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Lectures"
    post:
      tags:
      - "Lectures"
      summary: "Create a new lecture"
      operationId: "lecturesPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/lecture"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/lecture"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n\t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Lectures"
  /lectures/{id}:
    get:
      tags:
      - "Lectures"
      summary: "Load an individual lecture"
      operationId: "lecturesIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Lecture id."
        required: true
        type: "number"
        x-example: 1
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/lecture"
          examples:
            application/json: "{\n\t\t\"id\": \"1\",\n\t\t\"title\": \"Unit testing\
              \ for beginners\",\n\t\t\"room\": \"2B\",\n\t\t\"startTime\": \"08:30:00\"\
              ,\n\t\t\"endTime\": \"08:45:00\",\n\t\t\"description\": \"Unit testing\
              \ for beginners\",\n\t\t\"trackId\": \"4\",\n\t\t\"speakerId\": \"4\"\
              \n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Lectures"
    put:
      tags:
      - "Lectures"
      summary: "Update a lecture"
      operationId: "lecturesIdPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Lecture id."
        required: true
        type: "number"
        x-example: 1
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/lecture"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/lecture"
          examples:
            application/json: "{\n\t\t\"id\": \"1\",\n\t\t\"title\": \"Unit testing\
              \ for beginners\",\n\t\t\"room\": \"2B\",\n\t\t\"startTime\": \"08:30:00\"\
              ,\n\t\t\"endTime\": \"08:45:00\",\n\t\t\"description\": \"Unit testing\
              \ for beginners\",\n\t\t\"trackId\": \"4\",\n\t\t\"speakerId\": \"4\"\
              \n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Lectures"
    delete:
      tags:
      - "Lectures"
      summary: "Delete a lecture"
      operationId: "lecturesIdDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Lecture id."
        required: true
        type: "number"
        x-example: 1
      responses:
        204:
          description: "Status 204 - No Content"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Lectures"
  /lectures/diff/{date}:
    get:
      tags:
      - "Lectures"
      summary: "Load"
      operationId: "lecturesDiffDateGET"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "Date."
        required: true
        type: "string"
        format: "date-time"
        x-example: "2018-06-14T13:15:35.605Z"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/lecturesResponse"
      x-swagger-router-controller: "Lectures"
  /notes/:
    get:
      tags:
      - "Notes"
      summary: "Load the list of notes"
      operationId: "notesGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/notesResponse"
          examples:
            application/json: "{\n\t\"hasNext\": false,\n\t\"items\": [{\n\t\t\"id\"\
              : \"1\",\n\t\t\"title\": \"Chrome DevTools\",\n\t\t\"text\": \"Note\
              \ of Chrome DevTools\",\n\t\t\"lectureId\": \"1\",\n\t\t\"userId\":\
              \ \"2\"\n\t}, {\n\t\t\"id\": \"2\",\n\t\t\"title\": \"Unit testing for\
              \ beginners\",\n\t\t\"text\": \"Note of unit testing for beginners\"\
              ,\n\t\t\"lectureId\": \"2\",\n\t\t\"userId\": \"1\"\n\t}]\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Notes"
    post:
      tags:
      - "Notes"
      summary: "Create a new note"
      operationId: "notesPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/note"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/note"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Notes"
  /notes/{id}:
    get:
      tags:
      - "Notes"
      summary: "Load an individual note"
      operationId: "notesIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Note id."
        required: true
        type: "number"
        x-example: 1
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/note"
          examples:
            application/json: "{\n\t\t\"id\": \"1\",\n\t\t\"title\": \"Chrome DevTools\"\
              ,\n\t\t\"text\": \"Note of Chrome DevTools\",\n\t\t\"lectureId\": \"\
              1\",\n\t\t\"userId\": \"2\"\n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"404\",\n\t\"message\": \"Not Found\"\
              ,\n\t\"detailedMessage\": \"Note not found\"\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Notes"
    put:
      tags:
      - "Notes"
      summary: "Update a note"
      operationId: "notesIdPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Note id."
        required: true
        type: "number"
        x-example: 1
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/note"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/note"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Notes"
    delete:
      tags:
      - "Notes"
      summary: "Delete a note"
      operationId: "notesIdDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Note id."
        required: true
        type: "number"
        x-example: 1
      responses:
        204:
          description: "Status 204 - No Content"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Notes"
  /notes/diff/{date}:
    get:
      tags:
      - "Notes"
      summary: "Load"
      operationId: "notesDiffDateGET"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "Date."
        required: true
        type: "string"
        format: "date-time"
        x-example: "2018-06-14T13:15:35.605Z"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/notesResponse"
      x-swagger-router-controller: "Notes"
  /speakers/:
    get:
      tags:
      - "Speakers"
      summary: "Load the list of speakers"
      operationId: "speakersGET"
      produces:
      - "application/json"
      parameters:
      - name: "order"
        in: "query"
        description: "Speakers list ordenation.\nShould receive field name to ordenate\
          \ by priorities and separated by commas.\nTo order fields by descendant,\
          \ the field should start with the sign of \"-\"."
        required: false
        type: "string"
        x-example: "order=name,-age"
      - name: "diffDate"
        in: "query"
        description: "Date used to search data that were updated from this date."
        required: false
        type: "string"
        format: "date-time"
        x-example: "diffDate=1528482645000"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/speakersResponse"
          examples:
            application/json: "{\n\t\"hasNext\": false,\n\t\"items\": [{\n\t\t\"id\"\
              : 1,\n\t\t\"name\": \"NodeJS Developer\",\n\t\t\"email\": \"developer.nodejs@totvs.com.br\"\
              ,\n\t\t\"description\": \"Nodejs developer with 4 years experience\"\
              \n\t}, {\n\t\t\"id\": 2,\n\t\t\"name\": \"Angular Developer\",\n\t\t\
              \"email\": \"developer.angular@totvs.com.br\",\n\t\t\"description\"\
              : \"Angular developer with 2 years experience\"\n\t}]\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Speakers"
    post:
      tags:
      - "Speakers"
      summary: "Create a new speaker"
      operationId: "speakersPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/speaker"
        x-examples:
          application/json: "Speaker"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/speaker"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Speakers"
  /speakers/{id}:
    get:
      tags:
      - "Speakers"
      summary: "Load an individual speaker"
      operationId: "speakersIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Speaker id."
        required: true
        type: "number"
        x-example: 1
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/speaker"
          examples:
            application/json: "{\n\t\"id\": 2,\n\t\"name\": \"Angular Developer\"\
              ,\n\t\"email\": \"developer.angular@totvs.com.br\",\n\t\"description\"\
              : \"Angular developer with 2 years experience\"\n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"404\",\n\t\"message\": \"Not Found\"\
              ,\n\t\"detailedMessage\": \"Speaker not found\"\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Speakers"
    put:
      tags:
      - "Speakers"
      summary: "Update a speaker"
      operationId: "speakersIdPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Speaker id."
        required: true
        type: "number"
        x-example: 1
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/speaker"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/speaker"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Speakers"
    delete:
      tags:
      - "Speakers"
      summary: "Delete a speaker"
      operationId: "speakersIdDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Speaker id."
        required: true
        type: "number"
        x-example: 1
      responses:
        204:
          description: "Status 204 - No Content"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Speakers"
  /speakers/{id}/lectures/:
    get:
      tags:
      - "Speakers"
      summary: "Load all lectures by speakers"
      operationId: "speakersIdLecturesGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Speaker id."
        required: true
        type: "string"
        x-example: "1"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/lecture"
          examples:
            application/json: "{\n\t\"id\": 2,\n\t\"name\": \"Angular Developer\"\
              ,\n\t\"email\": \"developer.angular@totvs.com.br\",\n\t\"description\"\
              : \"Angular developer with 2 years experience\",\n\t\"lectures\": [{\n\
              \t\t\"id\": \"1\",\n\t\t\"title\": \"Unit testing for beginners\"\n\t\
              },{\n\t\t\"id\": \"2\",\n\t\t\"title\": \"Basic RESTful API in NodeJS\"\
              \n\t}]\n}"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"404\",\n\t\"message\": \"Not Found\"\
              ,\n\t\"detailedMessage\": \"Speaker not found\"\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Speakers"
  /speakers/diff/{date}:
    get:
      tags:
      - "Speakers"
      summary: "Load"
      operationId: "speakersDiffDateGET"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "Date."
        required: true
        type: "string"
        format: "date-time"
        x-example: "2018-06-14T13:15:35.605Z"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/speakersResponse"
      x-swagger-router-controller: "Speakers"
  /tracks/:
    get:
      tags:
      - "Tracks"
      summary: "Load the list of Tracks"
      operationId: "tracksGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/tracksResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Tracks"
    post:
      tags:
      - "Tracks"
      summary: "Create a new track"
      operationId: "tracksPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/track"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/track"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Tracks"
  /tracks/{id}:
    get:
      tags:
      - "Tracks"
      summary: "Load an individual track"
      operationId: "tracksIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Track id."
        required: true
        type: "number"
        x-example: 1
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/track"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"404\",\n\t\"message\": \"Not Found\"\
              ,\n\t\"detailedMessage\": \"Track not found\"\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Tracks"
    put:
      tags:
      - "Tracks"
      summary: "Update a track"
      operationId: "tracksIdPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Track id."
        required: true
        type: "number"
        x-example: 1
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/track"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/track"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Tracks"
    delete:
      tags:
      - "Tracks"
      summary: "Delete a track"
      operationId: "tracksIdDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Track id."
        required: true
        type: "number"
        x-example: 1
      responses:
        204:
          description: "Status 204 - No Content"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Tracks"
  /tracks/diff/{date}:
    get:
      tags:
      - "Tracks"
      summary: "Load"
      operationId: "tracksDiffDateGET"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "Date."
        required: true
        type: "string"
        format: "date-time"
        x-example: "2018-06-14T13:15:35.605Z"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/tracksResponse"
      x-swagger-router-controller: "Tracks"
  /users/:
    get:
      tags:
      - "Users"
      summary: "Load the list of users"
      operationId: "usersGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/usersResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "Users"
      summary: "Create a new user"
      operationId: "usersPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/user"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/user"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Users"
  /users/{id}:
    get:
      tags:
      - "Users"
      summary: "Load an individual user"
      operationId: "usersIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id."
        required: true
        type: "number"
        x-example: 1
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/user"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"404\",\n\t\"message\": \"Not Found\"\
              ,\n\t\"detailedMessage\": \"User not found\"\n}"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
          examples:
            application/json: "{\n\t\"code\": \"500\",\n\t\"message\": \"Internal\
              \ Server Error\",\n  \t\"detailedMessage\": \"High system resource usage\"\
              \n}"
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "Users"
      summary: "Update a user"
      operationId: "usersIdPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id."
        required: true
        type: "number"
        x-example: 1
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/user"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/user"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "Users"
      summary: "Delete a user"
      operationId: "usersIdDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id."
        required: true
        type: "number"
        x-example: 1
      responses:
        204:
          description: "Status 204 - No Content"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "Users"
  /users/{id}/notes/:
    get:
      tags:
      - "Users"
      summary: "Load all notes by users"
      operationId: "usersIdNotesGET"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id."
        required: true
        type: "string"
        x-example: "1"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/user"
        404:
          description: "Status 404 - Not Found"
          schema:
            $ref: "#/definitions/errorResponse"
        500:
          description: "Status 500 - Internal Server Error"
      x-swagger-router-controller: "Users"
  /users/diff/{date}:
    get:
      tags:
      - "Users"
      summary: "Load"
      operationId: "usersDiffDateGET"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "Date."
        required: true
        type: "string"
        format: "date-time"
        x-example: "2018-06-14T13:15:35.605Z"
      responses:
        200:
          description: "Status 200 - OK"
          schema:
            $ref: "#/definitions/usersResponse"
      x-swagger-router-controller: "Users"
definitions:
  errorResponse:
    type: "object"
    required:
    - "code"
    - "detailedMessage"
    - "message"
    properties:
      code:
        type: "string"
        description: "Error code."
      message:
        type: "string"
        description: "Error message."
      detailedMessage:
        type: "string"
        description: "Message detail."
      helpUrl:
        type: "string"
        description: "Help URL."
      details:
        type: "string"
        description: "Details."
    description: "This general error structure is used throughout this API."
  conference:
    type: "object"
    required:
    - "date"
    - "description"
    - "location"
    - "title"
    properties:
      id:
        type: "string"
        description: "Conference id."
      title:
        type: "string"
        description: "Conference title."
      date:
        type: "string"
        format: "date-time"
        description: "Conference date."
      location:
        type: "string"
        description: "Conference location."
      description:
        type: "string"
        description: "Conference description."
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      location: "location"
      id: "id"
      title: "title"
  conferencesResponse:
    type: "object"
    required:
    - "hasNext"
    - "items"
    properties:
      hasNext:
        type: "boolean"
        description: "Indicate if has next page of data."
      items:
        type: "array"
        description: "Conference list."
        items:
          $ref: "#/definitions/conference"
    example:
      hasNext: true
      items:
      - date: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        location: "location"
        id: "id"
        title: "title"
      - date: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        location: "location"
        id: "id"
        title: "title"
  lecture:
    type: "object"
    required:
    - "description"
    - "endTime"
    - "room"
    - "speakerId"
    - "startTime"
    - "title"
    - "trackId"
    properties:
      id:
        type: "string"
        description: "Lecture id."
      title:
        type: "string"
        description: "Lecture title."
      description:
        type: "string"
        description: "Lecture description."
      room:
        type: "string"
        description: "Lecture room."
      startTime:
        type: "string"
        description: "Lecture start."
      endTime:
        type: "string"
        description: "Lecture end."
      trackId:
        type: "string"
        description: "Lecture track."
      speakerId:
        type: "string"
        description: "Speaker id."
    example:
      trackId: "trackId"
      description: "description"
      startTime: "startTime"
      speakerId: "speakerId"
      id: "id"
      endTime: "endTime"
      title: "title"
      room: "room"
  lectureSummary:
    type: "object"
    required:
    - "id"
    - "title"
    properties:
      id:
        type: "string"
        description: "Lecture id."
      title:
        type: "string"
        description: "Lecture title."
    example:
      id: "id"
      title: "title"
  lecturesResponse:
    type: "object"
    required:
    - "hasNext"
    - "items"
    properties:
      hasNext:
        type: "boolean"
        description: "Indicate if has next page of data."
      items:
        type: "array"
        description: "Lecture list."
        items:
          $ref: "#/definitions/lecture"
    example:
      hasNext: true
      items:
      - trackId: "trackId"
        description: "description"
        startTime: "startTime"
        speakerId: "speakerId"
        id: "id"
        endTime: "endTime"
        title: "title"
        room: "room"
      - trackId: "trackId"
        description: "description"
        startTime: "startTime"
        speakerId: "speakerId"
        id: "id"
        endTime: "endTime"
        title: "title"
        room: "room"
  note:
    type: "object"
    required:
    - "lectureId"
    - "text"
    - "title"
    - "userId"
    properties:
      id:
        type: "string"
        description: "Note id."
      title:
        type: "string"
        description: "Note title."
      text:
        type: "string"
        description: "Note text."
      lectureId:
        type: "string"
        description: "Lecture id."
      userId:
        type: "string"
        description: "User id."
    example:
      id: "id"
      text: "text"
      title: "title"
      userId: "userId"
      lectureId: "lectureId"
  noteSummary:
    type: "object"
    required:
    - "title"
    properties:
      id:
        type: "string"
        description: "Note id."
      title:
        type: "string"
        description: "Note title."
    example:
      id: "id"
      title: "title"
  notesResponse:
    type: "object"
    required:
    - "hasNext"
    - "items"
    properties:
      hasNext:
        type: "boolean"
        description: "Indicate if has next page of data."
      items:
        type: "array"
        description: "Note list."
        items:
          $ref: "#/definitions/note"
    example:
      hasNext: true
      items:
      - id: "id"
        text: "text"
        title: "title"
        userId: "userId"
        lectureId: "lectureId"
      - id: "id"
        text: "text"
        title: "title"
        userId: "userId"
        lectureId: "lectureId"
  speaker:
    type: "object"
    required:
    - "description"
    - "email"
    - "name"
    - "photo"
    properties:
      id:
        type: "string"
        description: "Speaker id."
      name:
        type: "string"
        description: "Speaker name."
      email:
        type: "string"
        description: "Speaker email."
      description:
        type: "string"
        description: "Speaker mini bio."
      photo:
        type: "string"
        description: "Speaker photo."
      deleted:
        type: "boolean"
        description: "Logic field to indicate if record was deleted."
      createdDate:
        type: "string"
        format: "date-time"
        description: "Record create date."
      updatedDate:
        type: "string"
        format: "date-time"
        description: "Record last update date."
      deletedDate:
        type: "string"
        format: "date-time"
        description: "Record delete date."
      lectures:
        type: "array"
        description: "Lecture list of speaker."
        items:
          $ref: "#/definitions/lectureSummary"
    example:
      deleted: true
      createdDate: "2000-01-23T04:56:07.000+00:00"
      deletedDate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      lectures:
      - id: "id"
        title: "title"
      - id: "id"
        title: "title"
      description: "description"
      photo: "photo"
      id: "id"
      updatedDate: "2000-01-23T04:56:07.000+00:00"
      email: "email"
  speakersResponse:
    type: "object"
    required:
    - "hasNext"
    - "items"
    properties:
      hasNext:
        type: "boolean"
        description: "Indicate if has next page of data."
      items:
        type: "array"
        description: "Speakers list."
        items:
          $ref: "#/definitions/speaker"
    description: "Pattern data type of return to speakers list."
    example:
      hasNext: true
      items:
      - deleted: true
        createdDate: "2000-01-23T04:56:07.000+00:00"
        deletedDate: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        lectures:
        - id: "id"
          title: "title"
        - id: "id"
          title: "title"
        description: "description"
        photo: "photo"
        id: "id"
        updatedDate: "2000-01-23T04:56:07.000+00:00"
        email: "email"
      - deleted: true
        createdDate: "2000-01-23T04:56:07.000+00:00"
        deletedDate: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        lectures:
        - id: "id"
          title: "title"
        - id: "id"
          title: "title"
        description: "description"
        photo: "photo"
        id: "id"
        updatedDate: "2000-01-23T04:56:07.000+00:00"
        email: "email"
  track:
    type: "object"
    required:
    - "color"
    - "name"
    properties:
      id:
        type: "string"
        description: "Track id."
      name:
        type: "string"
        description: "Track name."
      color:
        type: "string"
        description: "Track color."
    example:
      color: "color"
      name: "name"
      id: "id"
  tracksResponse:
    type: "object"
    required:
    - "hasNext"
    - "items"
    properties:
      hasNext:
        type: "boolean"
        description: "Indicate if has next page of data."
      items:
        type: "array"
        description: "Track list."
        items:
          $ref: "#/definitions/track"
    example:
      hasNext: true
      items:
      - color: "color"
        name: "name"
        id: "id"
      - color: "color"
        name: "name"
        id: "id"
  user:
    type: "object"
    required:
    - "isSuperUser"
    - "password"
    - "username"
    properties:
      id:
        type: "string"
        description: "User id."
      username:
        type: "string"
        description: "Username."
      password:
        type: "string"
        description: "Password."
      isSuperUser:
        type: "boolean"
        description: "Define if is a super user."
      notes:
        type: "array"
        description: "Notes list of user."
        items:
          $ref: "#/definitions/noteSummary"
    example:
      password: "password"
      notes:
      - id: "id"
        title: "title"
      - id: "id"
        title: "title"
      isSuperUser: true
      id: "id"
      username: "username"
  usersResponse:
    type: "object"
    required:
    - "hasNext"
    - "items"
    properties:
      hasNext:
        type: "boolean"
        description: "Indicate if has next page of data."
      items:
        type: "array"
        description: "User list."
        items:
          $ref: "#/definitions/user"
    example:
      hasNext: true
      items:
      - password: "password"
        notes:
        - id: "id"
          title: "title"
        - id: "id"
          title: "title"
        isSuperUser: true
        id: "id"
        username: "username"
      - password: "password"
        notes:
        - id: "id"
          title: "title"
        - id: "id"
          title: "title"
        isSuperUser: true
        id: "id"
        username: "username"
